FULL CREDIT
===========

QUESTION 1: Why is String[] args changed to a LinkedList in WordSearch.main? (Hint: Examine the WordSearch constructor!)


String[] args is changed to LinkedList in WordSearch.main because, unlike arrays, LinkedList can be dynamic meaning it can grow or shrink so it is not fixed which makes it an efficient choice. String[] args is only sufficient if you need to access an element by an index but if you're going to need to frequently add or remove elements then a LinkedList is preferred.


QUESTION 2: How many puzzles did your machine need to solve with 1 thread to run for between 30 and 45 seconds: 


With 1 thread, my machine needs 700 puzzles to run between 30 and 45 seconds (exact runtime is between 33-35 seconds).


QUESTION 3: Provide the output of 

    time java WordSearch n 1000 ../puzzle??.txt 

where n is 1 to 16 and 1000 is the number of puzzles specified in Question 2. NOTE: You can run all of these with a single bash command if you like (again, replace 1000 with your number of puzzles from Question 2):

for i in {1..16} ; do time java WordSearch $i 1000 ../puzzle??.txt ; done

Example Timing:

 for i in {1..16} ; do time java WordSearch $i 1000 ../puzzle??.txt ; done
1000 puzzles
Thread 0: 0-999

real	0m31.872s
user	0m32.475s
sys	0m0.224s

1000 puzzles
Thread 1: 500-999
Thread 0: 0-499

real	0m14.376s
user	0m29.078s
sys	0m0.229s

...and so on



YOUR Timing:


time java WordSearch 1 1000 ../puzzle??.txt

1000 puzzles with 1 threads
Thread 0: 0-999

real	0m45.753s
user	0m46.444s
sys	0m0.256s



time java WordSearch 3 1000 ../puzzle??.txt

1000 puzzles with 3 threads
Thread 0: 0-332
Thread 1: 333-665
Thread 2: 666-999

real	0m45.399s
user	0m46.295s
sys	0m0.310s



time java WordSearch 16 1000 ../puzzle??.txt


1000 puzzles with 16 threads
Thread 0: 0-61
Thread 1: 62-123
Thread 2: 124-185
Thread 3: 186-247
Thread 4: 248-309
Thread 5: 310-371
Thread 6: 372-433
Thread 7: 434-495
Thread 8: 496-557
Thread 9: 558-619
Thread 10: 620-681
Thread 11: 682-743
Thread 12: 744-805
Thread 13: 806-867
Thread 14: 868-929
Thread 15: 930-999

real	0m45.303s
user	0m46.210s
sys	0m0.333s



QUESTION 3: Does adding more threads continue to speed up the program? Do more threads ever slow down the program even slightly?  Why or why not?


Adding more threads does not continue to speed up the program. In fact, adding more threads slows the program down slightly. Above I ran 1000 puzzles with 1, 3, and 16 threads and got a runtime of 0m45.753s, 0m45.399s, and 0m45.303s respectively. This provides evidence for my previous statement because the program gradually had a slower runtime with each thread added. I believe this is because there is no thread pool. Without a thread pool there is not an efficient way to share data between threads. Mechanisms such as synchronization and mutex ensure thread safety which can impact performance and efficiency. So without a thread pool that has those mechanisms, multiple threads won't make a significant difference in the runtime of a program.


QUESTION 4: Does adding more threads increase the "system load" (sys), or is it constant regardless of the number of threads?  Why?


Adding more threads increases the "system load" (sys) up slightly. It does not stay constant regardless of the number of threads. Above I ran 1000 puzzles with 1, 3, and 16 threads and got a system load (sys) of 0m0.256s, 0m0.310s, and 0m0.333s respectively. This is because we are running a multi-threaded program without a thread pool. The system load reflects the amount of work that the CPU handles and if we create more threads without proper management it can lead to an increased CPU load which causes an increase in system load.


BONUS
=====

QUESTION 5: Time your thread pool version of WordSearch exactly as you did for the full credit version. Post your timings here.

YOUR Timing:







QUESTION 6: Is a thread pool faster, slower, or roughly equivalent in performance? 







QUESTION 7: Compare your full credit and bonus solution code. Which do you believe is more supportable over a long lifetime of evolving hardware and environments?







EXTREME BONUS
=============

QUESTION 8: Post your final timings here. (The "race" on Antares will determine the actual winner - this just lets me know you're competing!)







